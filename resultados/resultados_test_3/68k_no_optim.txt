; Código ensamblador Motorola 68k generado:
	ORG $1000
; ------- DECLARACIÓN DE CONSTANTES Y VARIABLES --------
t4	DS.L	1
t5	DS.L	1
t6	DS.L	1
t7	DS.L	1
t8	DS.L	1
t9	DS.L	1
t30	DS.L	1
t10	DS.L	1
t32	DS.L	1
t31	DS.L	1
t12	DS.L	1
t34	DS.L	1
t11	DS.L	1
t33	DS.L	1
t14	DS.L	1
t13	DS.L	1
t35	DS.L	1
t16	DS.L	1
t15	DS.L	1
t18	DS.L	1
t17	DS.L	1
t19	DS.L	1
t21	DS.L	1
t20	DS.L	1
t23	DS.L	1
t22	DS.L	1
ID2	DS.L	1
t25	DS.L	1
ID1	DS.L	1
t24	DS.L	1
ID4	DS.L	1
t27	DS.L	1
ID3	DS.L	20
t26	DS.L	1
ID6	DS.L	1
t29	DS.L	1
ID5	DS.L	1
t28	DS.L	1
t0	DS.L	1
t1	DS.L	1
t2	DS.L	1
t3	DS.L	1
; -----------------------------------------------------------------------------
; Subrutina para la función: L0
; -----------------------------------------------------------------------------
L0:
	MOVEM.L	D0-D7/A0-A6,-(A7)	; Guardar registros
	CLR.L	D0
	MOVE.L	68(SP),D0
	MOVE.L	D0,ID1
	CLR.L	D0
	MOVE.L	72(SP),D0
	MOVE.L	D0,ID2
	MOVE.L	 ID1,t0
	MOVE.L	 ID2,t1
	MOVE.L	t0,D0
	MOVE.L	t1,D1
	MULS.W	D1,D0
	MOVE.L	D0,t2
	MOVE.L	t2,64(SP)
	MOVEM.L	(A7)+,D0-D7/A0-A6	; Restaurar registros
	RTS	; Retornar de la función
; ---- FIN DE LAS SUBRUTINAS ----------------
START
	MOVE.L	 #1,t3
	MOVE.L	 #4,t4
	MOVE.L	 #0,t5
	MOVE.L	t5,D0
	MOVE.L	t4,D1
	MULS.W	D1,D0
	MOVE.L	D0,t4
	MOVEA.L	t4,A0
	MOVE.L	t3,(ID3,A0)
	MOVE.L	 #2,t6
	MOVE.L	 #4,t7
	MOVE.L	 #1,t8
	MOVE.L	t8,D0
	MOVE.L	t7,D1
	MULS.W	D1,D0
	MOVE.L	D0,t7
	MOVEA.L	t7,A0
	MOVE.L	t6,(ID3,A0)
	MOVE.L	 #3,t9
	MOVE.L	 #4,t10
	MOVE.L	 #2,t11
	MOVE.L	t11,D0
	MOVE.L	t10,D1
	MULS.W	D1,D0
	MOVE.L	D0,t10
	MOVEA.L	t10,A0
	MOVE.L	t9,(ID3,A0)
	MOVE.L	 #4,t12
	MOVE.L	 #4,t13
	MOVE.L	 #3,t14
	MOVE.L	t14,D0
	MOVE.L	t13,D1
	MULS.W	D1,D0
	MOVE.L	D0,t13
	MOVEA.L	t13,A0
	MOVE.L	t12,(ID3,A0)
	MOVE.L	 #5,t15
	MOVE.L	 #4,t16
	MOVE.L	 #4,t17
	MOVE.L	t17,D0
	MOVE.L	t16,D1
	MULS.W	D1,D0
	MOVE.L	D0,t16
	MOVEA.L	t16,A0
	MOVE.L	t15,(ID3,A0)
	MOVE.L	 #1,t18
	MOVE.L	 t18,ID4
	MOVE.L	 #-1,t19
	MOVE.L	 t19,ID5
	MOVE.L	 #0,t20
	MOVE.L	 t20,ID6
L1:
	MOVE.L	 ID5,t21
	MOVE.L	t21,D0
	MOVE.L	#0,D1
	CMP.L	D1,D0
	BEQ	L2
	MOVE.L	 ID4,t22
	MOVE.L	t22,D0
	MOVE.L	D0,-(SP)
	MOVE.L	 #4,t23
	MOVE.L	 ID6,t24
	MOVE.L	t24,D0
	MOVE.L	t23,D1
	MULS.W	D1,D0
	MOVE.L	D0,t23
	MOVEA.L	t23,A0
	MOVE.L	(ID3,A0),t25
	MOVE.L	t25,D0
	MOVE.L	D0,-(SP)
	SUBA.L	#4,SP
	JSR	L0
	MOVE.L	(SP)+,t26
	MOVE.L	#$01000000,SP
	MOVE.L	 t26,ID4
	MOVE.L	 ID4,t28
	MOVE.L	 #10,t29
	MOVE.L	t28,D0
	MOVE.L	t29,D1
	CMP.L	D1,D0
	BGT	L3
	MOVE.L	 #0,t30
	JMP	L4
L3:
	MOVE.L	 #-1,t30
L4:
	MOVE.L	t30,D0
	MOVE.L	#0,D1
	CMP.L	D1,D0
	BEQ	L5
	MOVE.L	 ID4,t31
	MOVE.L	t31,D0
	MOVE.L	D0,-(SP)
	JSR	PRINT_GENERAL
	ADDA.L	#4,SP
	MOVE.L	 #0,t32
	MOVE.L	 t32,ID5
L5:
	MOVE.L	 ID6,t33
	MOVE.L	 #1,t34
	MOVE.L	t33,D0
	MOVE.L	t34,D1
	ADD.L	D1,D0
	MOVE.L	D0,t35
	MOVE.L	 t35,ID6
	JMP	L1
L2:
	SIMHALT
; -----------------------------------------------------------------------------
PRINT_GENERAL
; General Print Subroutine
; INPUT: Stack contains items to print, each 4 bytes
; OUTPUT: Items are printed one by one
; -----------------------------------------------------------------------------
	MOVEM.L	D0-D2,-(A7)	; Guardar D0 y D1
	ADDA.L	#16,SP
	CLR.L	D2
PRINT_LOOP:
	CMP.L	#$01000000,SP
	BEQ	PRINT_END	; Si no hay más elementos, finalizar
	ADD.L	#4,D2
	MOVE.L	(SP)+,D1
	JSR	PRINT_VALUE	; Llamar a subrutina para imprimir
	BRA	PRINT_LOOP
PRINT_END:
	SUBA.L	D2,SP
	SUBA.L	#16,SP
	MOVEM.L	(A7)+,D0-D2	; Restaurar D1 y D0
	RTS	; Retornar de la subrutina
; -----------------------------------------------------------------------------
PRINT_VALUE
; Prints a single value
; INPUT: A1 contains the value to print
; OUTPUT: None
; -----------------------------------------------------------------------------
	MOVE.L	#3,D0	; Código para imprimir enteros
	TRAP	#15	; Llamada al sistema
	MOVEA.L	#NEWLINE,A1
	MOVE.L	#13,D0
	TRAP	#15
	RTS	; Retornar de la subrutina
NEWLINE	DC.B	' ',0
	END	START
