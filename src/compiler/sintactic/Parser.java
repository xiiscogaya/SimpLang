
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.sintactic;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.*;
import compiler.simbols.*;
import compiler.taulasimbols.*;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\004\004" +
    "\000\002\020\004\000\002\020\003\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\006\007\000" +
    "\002\011\006\000\002\011\004\000\002\015\006\000\002" +
    "\013\010\000\002\025\005\000\002\025\003\000\002\016" +
    "\006\000\002\016\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\014\006\000\002\014\004\000" +
    "\002\017\013\000\002\017\004\000\002\021\006\000\002" +
    "\032\004\000\002\033\005\000\002\022\005\000\002\022" +
    "\003\000\002\026\014\000\002\026\010\000\002\026\013" +
    "\000\002\026\007\000\002\027\010\000\002\027\007\000" +
    "\002\030\007\000\002\031\015\000\002\034\006\000\002" +
    "\035\006\000\002\036\005\000\002\036\003\000\002\023" +
    "\004\000\002\023\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\005\000\002\024\003\000\002\024\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\010\003\005\020\004\033\007\001\002\000" +
    "\042\003\053\004\040\010\021\011\014\012\016\013\017" +
    "\014\020\016\051\026\034\032\061\034\035\040\036\043" +
    "\033\044\057\046\052\047\030\001\002\000\004\021\246" +
    "\001\002\000\004\002\245\001\002\000\014\010\021\011" +
    "\014\012\016\013\017\014\020\001\002\000\010\003\005" +
    "\020\004\033\007\001\002\000\004\002\ufffe\001\002\000" +
    "\004\002\001\001\002\000\004\002\uffff\001\002\000\004" +
    "\004\uffc6\001\002\000\004\004\022\001\002\000\004\004" +
    "\uffc7\001\002\000\004\004\uffc8\001\002\000\004\004\uffc5" +
    "\001\002\000\004\004\uffc9\001\002\000\004\027\023\001" +
    "\002\000\014\010\021\011\014\012\016\013\017\014\020" +
    "\001\002\000\004\004\242\001\002\000\004\030\026\001" +
    "\002\000\004\020\027\001\002\000\042\003\053\004\040" +
    "\010\021\011\014\012\016\013\017\014\020\016\051\026" +
    "\034\032\061\034\035\040\036\043\033\044\057\046\052" +
    "\047\030\001\002\000\004\027\237\001\002\000\004\017" +
    "\236\001\002\000\004\017\235\001\002\000\016\004\106" +
    "\005\073\006\072\007\070\015\071\027\111\001\002\000" +
    "\004\004\221\001\002\000\020\004\106\005\073\006\072" +
    "\007\070\015\071\017\uffca\027\111\001\002\000\016\004" +
    "\106\005\073\006\072\007\070\015\071\027\111\001\002" +
    "\000\044\003\ufff2\004\ufff2\010\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\016\ufff2\021\ufff2\026\ufff2\032\ufff2\034\ufff2" +
    "\040\ufff2\043\ufff2\044\ufff2\046\ufff2\047\ufff2\001\002\000" +
    "\012\022\067\024\132\025\131\027\136\001\002\000\004" +
    "\004\172\001\002\000\044\003\ufff1\004\ufff1\010\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\016\ufff1\021\ufff1\026\ufff1" +
    "\032\ufff1\034\ufff1\040\ufff1\043\ufff1\044\ufff1\046\ufff1\047" +
    "\ufff1\001\002\000\004\025\170\001\002\000\004\017\167" +
    "\001\002\000\004\017\166\001\002\000\044\003\053\004" +
    "\040\010\021\011\014\012\016\013\017\014\020\016\051" +
    "\021\ufffa\026\034\032\061\034\035\040\036\043\033\044" +
    "\057\046\052\047\030\001\002\000\004\017\164\001\002" +
    "\000\004\017\163\001\002\000\014\010\021\011\014\012" +
    "\016\013\017\014\020\001\002\000\004\027\151\001\002" +
    "\000\004\017\150\001\002\000\004\021\147\001\002\000" +
    "\044\003\ufff0\004\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\016\ufff0\021\ufff0\026\ufff0\032\ufff0\034\ufff0\040" +
    "\ufff0\043\ufff0\044\ufff0\046\ufff0\047\ufff0\001\002\000\004" +
    "\017\146\001\002\000\004\027\100\001\002\000\004\017" +
    "\077\001\002\000\014\010\021\011\014\012\016\013\017" +
    "\014\020\001\002\000\004\017\063\001\002\000\044\003" +
    "\ufff6\004\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6" +
    "\016\ufff6\021\ufff6\026\ufff6\032\ufff6\034\ufff6\040\ufff6\043" +
    "\ufff6\044\ufff6\046\ufff6\047\ufff6\001\002\000\004\004\065" +
    "\001\002\000\004\022\067\001\002\000\004\017\uffe9\001" +
    "\002\000\012\005\073\006\072\007\070\015\071\001\002" +
    "\000\022\017\uffbb\020\uffbb\023\uffbb\030\uffbb\031\uffbb\035" +
    "\uffbb\036\uffbb\037\uffbb\001\002\000\022\017\uffb8\020\uffb8" +
    "\023\uffb8\030\uffb8\031\uffb8\035\uffb8\036\uffb8\037\uffb8\001" +
    "\002\000\022\017\uffba\020\uffba\023\uffba\030\uffba\031\uffba" +
    "\035\uffba\036\uffba\037\uffba\001\002\000\022\017\uffb9\020" +
    "\uffb9\023\uffb9\030\uffb9\031\uffb9\035\uffb9\036\uffb9\037\uffb9" +
    "\001\002\000\004\023\075\001\002\000\024\017\uffe4\020" +
    "\uffe4\022\067\025\uffe4\030\uffe4\031\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\001\002\000\022\017\uffe5\020\uffe5\025\uffe5\030" +
    "\uffe5\031\uffe5\035\uffe5\036\uffe5\037\uffe5\001\002\000\044" +
    "\003\ufff8\004\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\016\ufff8\021\ufff8\026\ufff8\032\ufff8\034\ufff8\040\ufff8" +
    "\043\ufff8\044\ufff8\046\ufff8\047\ufff8\001\002\000\014\010" +
    "\021\011\014\012\016\013\017\014\020\001\002\000\004" +
    "\017\102\001\002\000\016\004\106\005\073\006\072\007" +
    "\070\015\071\027\111\001\002\000\020\017\uffbd\020\uffbd" +
    "\030\uffbd\031\uffbd\035\uffbd\036\uffbd\037\uffbd\001\002\000" +
    "\020\017\uffbf\020\uffbf\030\uffbf\031\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\001\002\000\020\017\uffc1\020\uffc1\030\uffc1\031" +
    "\uffc1\035\uffc1\036\uffc1\037\uffc1\001\002\000\026\017\uffbc" +
    "\020\uffbc\022\067\027\136\030\uffbc\031\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\045\137\001\002\000\012\017\122\035\113" +
    "\036\114\037\116\001\002\000\020\017\uffc0\020\uffc0\030" +
    "\uffc0\031\uffc0\035\uffc0\036\uffc0\037\uffc0\001\002\000\016" +
    "\004\106\005\073\006\072\007\070\015\071\027\111\001" +
    "\002\000\012\030\115\035\113\036\114\037\116\001\002" +
    "\000\016\004\106\005\073\006\072\007\070\015\071\027" +
    "\111\001\002\000\016\004\106\005\073\006\072\007\070" +
    "\015\071\027\111\001\002\000\020\017\uffbe\020\uffbe\030" +
    "\uffbe\031\uffbe\035\uffbe\036\uffbe\037\uffbe\001\002\000\016" +
    "\004\106\005\073\006\072\007\070\015\071\027\111\001" +
    "\002\000\020\017\uffc2\020\uffc2\030\uffc2\031\uffc2\035\uffc2" +
    "\036\uffc2\037\uffc2\001\002\000\020\017\uffc3\020\uffc3\030" +
    "\uffc3\031\uffc3\035\uffc3\036\uffc3\037\116\001\002\000\020" +
    "\017\uffc4\020\uffc4\030\uffc4\031\uffc4\035\uffc4\036\114\037" +
    "\116\001\002\000\004\004\123\001\002\000\010\022\067" +
    "\024\132\025\131\001\002\000\004\030\125\001\002\000" +
    "\004\020\126\001\002\000\042\003\053\004\040\010\021" +
    "\011\014\012\016\013\017\014\020\016\051\026\034\032" +
    "\061\034\035\040\036\043\033\044\057\046\052\047\030" +
    "\001\002\000\004\021\130\001\002\000\044\003\uffd0\004" +
    "\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\016\uffd0" +
    "\021\uffd0\026\uffd0\032\uffd0\034\uffd0\040\uffd0\043\uffd0\044" +
    "\uffd0\046\uffd0\047\uffd0\001\002\000\016\004\106\005\073" +
    "\006\072\007\070\015\071\027\111\001\002\000\016\004" +
    "\106\005\073\006\072\007\070\015\071\027\111\001\002" +
    "\000\022\017\uffdb\020\uffdb\025\uffdb\030\uffdb\031\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\001\002\000\014\017\uffe2\030\uffe2" +
    "\035\113\036\114\037\116\001\002\000\014\017\uffe3\030" +
    "\uffe3\035\113\036\114\037\116\001\002\000\016\004\106" +
    "\005\073\006\072\007\070\015\071\027\111\001\002\000" +
    "\004\004\140\001\002\000\020\017\uffda\020\uffda\030\uffda" +
    "\031\uffda\035\uffda\036\uffda\037\uffda\001\002\000\006\030" +
    "\144\031\143\001\002\000\014\030\uffd8\031\uffd8\035\113" +
    "\036\114\037\116\001\002\000\016\004\106\005\073\006" +
    "\072\007\070\015\071\027\111\001\002\000\020\017\uffdc" +
    "\020\uffdc\030\uffdc\031\uffdc\035\uffdc\036\uffdc\037\uffdc\001" +
    "\002\000\014\030\uffd9\031\uffd9\035\113\036\114\037\116" +
    "\001\002\000\044\003\ufff5\004\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\016\ufff5\021\ufff5\026\ufff5\032\ufff5" +
    "\034\ufff5\040\ufff5\043\ufff5\044\ufff5\046\ufff5\047\ufff5\001" +
    "\002\000\010\003\uffde\020\uffde\033\uffde\001\002\000\044" +
    "\003\uffed\004\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014" +
    "\uffed\016\uffed\021\uffed\026\uffed\032\uffed\034\uffed\040\uffed" +
    "\043\uffed\044\uffed\046\uffed\047\uffed\001\002\000\016\004" +
    "\106\005\073\006\072\007\070\015\071\027\111\001\002" +
    "\000\014\030\uffcc\031\155\035\113\036\114\037\116\001" +
    "\002\000\004\030\154\001\002\000\004\017\uffcf\001\002" +
    "\000\016\004\106\005\073\006\072\007\070\015\071\027" +
    "\111\001\002\000\004\030\uffcd\001\002\000\004\004\160" +
    "\001\002\000\004\025\161\001\002\000\012\005\073\006" +
    "\072\007\070\015\071\001\002\000\004\017\uffec\001\002" +
    "\000\044\003\ufff3\004\ufff3\010\ufff3\011\ufff3\012\ufff3\013" +
    "\ufff3\014\ufff3\016\ufff3\021\ufff3\026\ufff3\032\ufff3\034\ufff3" +
    "\040\ufff3\043\ufff3\044\ufff3\046\ufff3\047\ufff3\001\002\000" +
    "\044\003\ufff9\004\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\014\ufff9\016\ufff9\021\ufff9\026\ufff9\032\ufff9\034\ufff9\040" +
    "\ufff9\043\ufff9\044\ufff9\046\ufff9\047\ufff9\001\002\000\004" +
    "\021\ufffb\001\002\000\044\003\ufff7\004\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7\021\ufff7\026\ufff7" +
    "\032\ufff7\034\ufff7\040\ufff7\043\ufff7\044\ufff7\046\ufff7\047" +
    "\ufff7\001\002\000\044\003\uffee\004\uffee\010\uffee\011\uffee" +
    "\012\uffee\013\uffee\014\uffee\016\uffee\021\uffee\026\uffee\032" +
    "\uffee\034\uffee\040\uffee\043\uffee\044\uffee\046\uffee\047\uffee" +
    "\001\002\000\016\004\106\005\073\006\072\007\070\015" +
    "\071\027\111\001\002\000\014\017\uffe1\030\uffe1\035\113" +
    "\036\114\037\116\001\002\000\012\017\uffea\025\173\030" +
    "\uffea\031\uffea\001\002\000\016\004\106\005\073\006\072" +
    "\007\070\015\071\027\111\001\002\000\016\017\uffeb\030" +
    "\uffeb\031\uffeb\035\113\036\114\037\116\001\002\000\012" +
    "\020\176\035\113\036\114\037\116\001\002\000\042\003" +
    "\053\004\040\010\021\011\014\012\016\013\017\014\020" +
    "\016\051\026\034\032\061\034\035\040\036\043\033\044" +
    "\057\046\052\047\030\001\002\000\004\021\200\001\002" +
    "\000\050\003\uffd4\004\uffd4\010\uffd4\011\uffd4\012\uffd4\013" +
    "\uffd4\014\uffd4\016\uffd4\021\uffd4\026\uffd4\032\uffd4\034\uffd4" +
    "\040\uffd4\041\202\042\201\043\uffd4\044\uffd4\046\uffd4\047" +
    "\uffd4\001\002\000\004\020\215\001\002\000\016\004\106" +
    "\005\073\006\072\007\070\015\071\027\111\001\002\000" +
    "\046\003\uffd6\004\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\016\uffd6\021\uffd6\026\uffd6\032\uffd6\034\uffd6\040" +
    "\uffd6\042\204\043\uffd6\044\uffd6\046\uffd6\047\uffd6\001\002" +
    "\000\004\020\205\001\002\000\042\003\053\004\040\010" +
    "\021\011\014\012\016\013\017\014\020\016\051\026\034" +
    "\032\061\034\035\040\036\043\033\044\057\046\052\047" +
    "\030\001\002\000\004\021\207\001\002\000\044\003\uffd7" +
    "\004\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\016" +
    "\uffd7\021\uffd7\026\uffd7\032\uffd7\034\uffd7\040\uffd7\043\uffd7" +
    "\044\uffd7\046\uffd7\047\uffd7\001\002\000\012\020\211\035" +
    "\113\036\114\037\116\001\002\000\042\003\053\004\040" +
    "\010\021\011\014\012\016\013\017\014\020\016\051\026" +
    "\034\032\061\034\035\040\036\043\033\044\057\046\052" +
    "\047\030\001\002\000\004\021\213\001\002\000\050\003" +
    "\uffd2\004\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2" +
    "\016\uffd2\021\uffd2\026\uffd2\032\uffd2\034\uffd2\040\uffd2\041" +
    "\202\042\uffd2\043\uffd2\044\uffd2\046\uffd2\047\uffd2\001\002" +
    "\000\046\003\uffd3\004\uffd3\010\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\016\uffd3\021\uffd3\026\uffd3\032\uffd3\034\uffd3" +
    "\040\uffd3\042\uffd3\043\uffd3\044\uffd3\046\uffd3\047\uffd3\001" +
    "\002\000\042\003\053\004\040\010\021\011\014\012\016" +
    "\013\017\014\020\016\051\026\034\032\061\034\035\040" +
    "\036\043\033\044\057\046\052\047\030\001\002\000\004" +
    "\021\217\001\002\000\044\003\uffd5\004\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\016\uffd5\021\uffd5\026\uffd5" +
    "\032\uffd5\034\uffd5\040\uffd5\043\uffd5\044\uffd5\046\uffd5\047" +
    "\uffd5\001\002\000\012\017\uffcb\035\113\036\114\037\116" +
    "\001\002\000\004\025\222\001\002\000\004\027\223\001" +
    "\002\000\014\010\021\011\014\012\016\013\017\014\020" +
    "\001\002\000\004\030\230\001\002\000\006\030\uffe6\031" +
    "\226\001\002\000\014\010\021\011\014\012\016\013\017" +
    "\014\020\001\002\000\004\030\uffe7\001\002\000\004\017" +
    "\uffe8\001\002\000\012\020\232\035\113\036\114\037\116" +
    "\001\002\000\042\003\053\004\040\010\021\011\014\012" +
    "\016\013\017\014\020\016\051\026\034\032\061\034\035" +
    "\040\036\043\033\044\057\046\052\047\030\001\002\000" +
    "\004\021\234\001\002\000\044\003\uffd1\004\uffd1\010\uffd1" +
    "\011\uffd1\012\uffd1\013\uffd1\014\uffd1\016\uffd1\021\uffd1\026" +
    "\uffd1\032\uffd1\034\uffd1\040\uffd1\043\uffd1\044\uffd1\046\uffd1" +
    "\047\uffd1\001\002\000\044\003\ufff4\004\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\016\ufff4\021\ufff4\026\ufff4" +
    "\032\ufff4\034\ufff4\040\ufff4\043\ufff4\044\ufff4\046\ufff4\047" +
    "\ufff4\001\002\000\044\003\uffef\004\uffef\010\uffef\011\uffef" +
    "\012\uffef\013\uffef\014\uffef\016\uffef\021\uffef\026\uffef\032" +
    "\uffef\034\uffef\040\uffef\043\uffef\044\uffef\046\uffef\047\uffef" +
    "\001\002\000\004\004\240\001\002\000\004\030\241\001" +
    "\002\000\004\017\uffce\001\002\000\006\030\uffdf\031\243" +
    "\001\002\000\014\010\021\011\014\012\016\013\017\014" +
    "\020\001\002\000\004\030\uffe0\001\002\000\004\002\000" +
    "\001\002\000\012\002\ufffc\003\uffdd\020\uffdd\033\uffdd\001" +
    "\002\000\004\021\250\001\002\000\004\002\ufffd\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\012\002\005\003\011\004\010\017\007\001" +
    "\001\000\042\005\045\006\046\010\040\011\057\012\055" +
    "\013\061\015\044\020\246\021\031\023\047\026\036\030" +
    "\041\031\054\032\042\034\030\035\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\014\001\001\000" +
    "\010\003\012\004\010\017\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\023\014\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\005\045\006\046\010\040\011" +
    "\057\012\055\013\061\015\044\020\053\021\031\023\047" +
    "\026\036\030\041\031\054\032\042\034\030\035\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\102\021\104\024\230\032\107\033\103\001" +
    "\001\000\002\001\001\000\014\007\102\021\104\024\217" +
    "\032\107\033\103\001\001\000\014\007\102\021\104\024" +
    "\174\032\107\033\103\001\001\000\002\001\001\000\004" +
    "\016\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\005\045\006\046\010\040\011\057\012\055\013\061\015" +
    "\044\020\164\021\031\023\047\026\036\030\041\031\054" +
    "\032\042\034\030\035\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\065\001\001\000\002\001\001" +
    "\000\004\007\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\040\011\100\001\001\000\002\001\001" +
    "\000\014\007\102\021\104\024\106\032\107\033\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\102\021\104\024\111\032\107\033\103" +
    "\001\001\000\002\001\001\000\014\007\102\021\104\024" +
    "\120\032\107\033\103\001\001\000\014\007\102\021\104" +
    "\024\117\032\107\033\103\001\001\000\002\001\001\000" +
    "\014\007\102\021\104\024\116\032\107\033\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\123\032\042\001\001\000\004\016\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\005\045\006" +
    "\046\010\040\011\057\012\055\013\061\015\044\020\126" +
    "\021\031\023\047\026\036\030\041\031\054\032\042\034" +
    "\030\035\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\102\021\104\024\134\032\107\033\103\001" +
    "\001\000\014\007\102\021\104\024\133\032\107\033\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\102\021\104\022\140\024\141\032\107" +
    "\033\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\102\021\104" +
    "\024\144\032\107\033\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\007\102\021\104\024\151\032\107\033" +
    "\103\036\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\007\102\021\104\024\151\032" +
    "\107\033\103\036\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\102\021\104\024\170\032\107\033\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\102\021\104\024" +
    "\173\032\107\033\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\005\045\006\046\010\040\011\057\012" +
    "\055\013\061\015\044\020\176\021\031\023\047\026\036" +
    "\030\041\031\054\032\042\034\030\035\043\001\001\000" +
    "\002\001\001\000\004\027\202\001\001\000\002\001\001" +
    "\000\014\007\102\021\104\024\207\032\107\033\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\005\045" +
    "\006\046\010\040\011\057\012\055\013\061\015\044\020" +
    "\205\021\031\023\047\026\036\030\041\031\054\032\042" +
    "\034\030\035\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\005\045\006\046\010\040" +
    "\011\057\012\055\013\061\015\044\020\211\021\031\023" +
    "\047\026\036\030\041\031\054\032\042\034\030\035\043" +
    "\001\001\000\002\001\001\000\004\027\213\001\001\000" +
    "\002\001\001\000\042\005\045\006\046\010\040\011\057" +
    "\012\055\013\061\015\044\020\215\021\031\023\047\026" +
    "\036\030\041\031\054\032\042\034\030\035\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\040\011\224" +
    "\025\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\040\011\224\025\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\005\045\006" +
    "\046\010\040\011\057\012\055\013\061\015\044\020\232" +
    "\021\031\023\047\026\036\030\041\031\054\032\042\034" +
    "\030\035\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\023\014\243\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public static TaulaSimbols taulaSim = new TaulaSimbols(); 

    @Override
    public void syntax_error(Symbol cur_token) {
        ComplexSymbol token = (ComplexSymbol) cur_token;
        Location l = token.getLeft();
        String mensaje = "Error sintáctico en línea " + l.getLine() +
                     ": se encontró '" + (cur_token.value != null ? cur_token.value : cur_token.sym) + "'";
        ErrorManager.addError(2, mensaje);
    }

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) {
        ComplexSymbol token = (ComplexSymbol) cur_token;
        Location l = token.getLeft();

        String mensaje = "Error sintáctico no recuperable en línea " + l.getLine() +
                        ": se encontró '" + (cur_token.value != null ? cur_token.value : cur_token.sym) + "'";
        
        ErrorManager.addError(2, mensaje); // 2 indica error sintáctico

        // Detener el análisis sintáctico
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= ProgramaList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramaList ::= DecFun ProgramaList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgramaList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgramaList ::= Main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgramaList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Main ::= LBRACE Bloque RBRACE 
            {
              Object RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bloque = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 SemanticHelper.procesarMain((SBloque) bloque, taulaSim); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Main ::= error RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Bloque ::= Sentencia Bloque 
            {
              Object RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object sentencia = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bloque = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SBloque((SBloque) bloque, (SBase) sentencia); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Bloque ::= Sentencia 
            {
              Object RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object sentencia = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SBloque((SBase) sentencia); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Sentencia ::= DecConstante SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Sentencia ::= DecVar SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sentencia ::= DecArray SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sentencia ::= DecTupla SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Sentencia ::= Asignacion SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sentencia ::= LlamadaFuncion SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Sentencia ::= Return SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Sentencia ::= If_Sentencia 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Sentencia ::= While_Sentencia 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Sentencia ::= For_Sentencia 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sentencia ::= Print_Sentencia SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencia ::= Input_Sentencia SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Sentencia ::= error SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DecConstante ::= CONST Type ID EQUAL Valor 
            {
              Object RESULT =null;
		int idTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object idType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SDecConstante((SType) idType, id, (SValor) valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecConstante",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DecVar ::= Type ID EQUAL Expresion 
            {
              Object RESULT =null;
		int idTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object idType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SDecVar((SType) idType, id, (SExpresion) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecVar",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DecVar ::= Type ID 
            {
              Object RESULT =null;
		int idTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object idType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SDecVar((SType) idType, id, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecVar",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DecArray ::= ARRAY Type ID ListaDimensiones 
            {
              Object RESULT =null;
		int idTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SDecArray((SType) idType, id, (SListaDimensiones) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecArray",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DecTupla ::= TUPLA ID EQUAL LPAREN ListaTupla RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SDecTupla(id, (SListaTupla) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecTupla",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ListaTupla ::= DecVar COMMA ListaTupla 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaTupla((SListaTupla) lista, (SDecVar) var); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaTupla",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListaTupla ::= DecVar 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaTupla((SDecVar) var); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaTupla",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListaDimensiones ::= LBRACKET Valor RBRACKET ListaDimensiones 
            {
              Object RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaDimensiones((SValor) size, (SListaDimensiones) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaDimensiones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListaDimensiones ::= LBRACKET Valor RBRACKET 
            {
              Object RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SListaDimensiones((SValor) size, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaDimensiones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Asignacion ::= ID EQUAL Expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SAsignacion(id, "=", (SExpresion) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Asignacion ::= ID OP_ASSIGN Expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SAsignacion(id, (String) op, (SExpresion) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Asignacion ::= LlamadaArray EQUAL Expresion 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SAsignacion((SLlamadaArray) array, "=", (SExpresion) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ListaParametros ::= Type ID COMMA ListaParametros 
            {
              Object RESULT =null;
		int idTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object idType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaParametros((SType) idType, id, (SListaParametros) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaParametros",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListaParametros ::= Type ID 
            {
              Object RESULT =null;
		int idTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object idType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaParametros((SType) idType, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaParametros",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DecFun ::= DEF Type ID LPAREN ListaParametros RPAREN LBRACE Bloque RBRACE 
            {
              Object RESULT =null;
		int idTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object idType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bloque = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 SemanticHelper.procesarDecFuncion((SType) idType, id, (SListaParametros) params, (SBloque) bloque, taulaSim); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecFun",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DecFun ::= error RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecFun",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LlamadaFuncion ::= ID LPAREN ListaArgumentos RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                    TipoSubyacente tipoRetorno = SemanticHelper.obtenerTipoFuncion(id, taulaSim);
                    RESULT = new SLlamadaFuncion(id, (SListaArgumentos) lista, tipoRetorno); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LlamadaFuncion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LlamadaArray ::= ID ListaDimensiones 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SLlamadaArray(id, (SListaDimensiones) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LlamadaArray",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LlamadaTupla ::= ID DOT ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int campoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String campo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SLlamadaTupla(id, campo); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LlamadaTupla",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ListaArgumentos ::= ListaArgumentos COMMA Expresion 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaArgumentos((SListaArgumentos) lista, (SExpresion) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaArgumentos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ListaArgumentos ::= Expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaArgumentos((SExpresion) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaArgumentos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // If_Sentencia ::= IF Expresion LBRACE Bloque RBRACE Elif_Lista ELSE LBRACE Bloque RBRACE 
            {
              Object RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bloque1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bloque1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object bloque1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bloque2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloque2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bloque2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SIf((SExpresion) expresion, (SBloque) bloque1, (SElif) lista, (SBloque) bloque2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("If_Sentencia",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // If_Sentencia ::= IF Expresion LBRACE Bloque RBRACE Elif_Lista 
            {
              Object RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bloque1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bloque1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object bloque1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SIf((SExpresion) expresion, (SBloque) bloque1, (SElif) lista, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("If_Sentencia",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // If_Sentencia ::= IF Expresion LBRACE Bloque RBRACE ELSE LBRACE Bloque RBRACE 
            {
              Object RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bloque1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bloque1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object bloque1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bloque2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloque2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bloque2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SIf((SExpresion) expresion, (SBloque) bloque1, null, (SBloque) bloque2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("If_Sentencia",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // If_Sentencia ::= IF Expresion LBRACE Bloque RBRACE 
            {
              Object RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bloque1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloque1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bloque1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SIf((SExpresion) expresion, (SBloque) bloque1, null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("If_Sentencia",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Elif_Lista ::= ELIF Expresion LBRACE Bloque RBRACE Elif_Lista 
            {
              Object RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object bloque = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SElif((SElif) lista, (SExpresion) expresion, (SBloque) bloque); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elif_Lista",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Elif_Lista ::= ELIF Expresion LBRACE Bloque RBRACE 
            {
              Object RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bloque = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SElif((SExpresion) expresion, (SBloque) bloque); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elif_Lista",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // While_Sentencia ::= WHILE Expresion LBRACE Bloque RBRACE 
            {
              Object RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bloque = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SWhile((SExpresion) expresion, (SBloque) bloque); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("While_Sentencia",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // For_Sentencia ::= FOR LPAREN DecVar SEMICOLON Expresion SEMICOLON Asignacion RPAREN LBRACE Bloque RBRACE 
            {
              Object RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object init = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int actualileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int actualiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object actuali = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bloque = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SFor((SDecVar) init, (SExpresion) condicion, (SAsignacion) actuali, (SBloque) bloque); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("For_Sentencia",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Print_Sentencia ::= PRINT LPAREN ListaExpresiones RPAREN 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SPrint((SListaExpresiones) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Print_Sentencia",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Input_Sentencia ::= INPUT LPAREN ID RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SInput(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Input_Sentencia",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ListaExpresiones ::= Expresion COMMA ListaExpresiones 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaExpresiones((SListaExpresiones) lista, (SExpresion) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaExpresiones",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ListaExpresiones ::= Expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaExpresiones((SExpresion) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaExpresiones",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Return ::= RETURN Expresion 
            {
              Object RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SReturn((SExpresion) expresion); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Return",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Return ::= RETURN 
            {
              Object RESULT =null;
		 RESULT = new SReturn(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Return",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Type ::= INT 
            {
              Object RESULT =null;
		 RESULT = new SType(new TipoSubyacente(Tipus.INT)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Type ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = new SType(new TipoSubyacente(Tipus.FLOAT)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Type ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = new SType(new TipoSubyacente(Tipus.BOOLEAN)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Type ::= STRING 
            {
              Object RESULT =null;
		 RESULT = new SType(new TipoSubyacente(Tipus.STRING)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Type ::= VOID 
            {
              Object RESULT =null;
		 RESULT = new SType(new TipoSubyacente(Tipus.VOID)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expresion ::= Expresion OP_ARITMETICO Expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExpresion((SExpresion) e1, (SExpresion) e2, (String) op); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expresion ::= Expresion OP_LOGICO Expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExpresion((SExpresion) e1, (SExpresion) e2, (String) op); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expresion ::= Expresion OP_COMPARACION Expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExpresion((SExpresion) e1, (SExpresion) e2, (String) op); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expresion ::= LlamadaFuncion 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExpresion((SLlamadaFuncion) func); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expresion ::= LlamadaArray 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExpresion((SLlamadaArray) array); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expresion ::= LlamadaTupla 
            {
              Object RESULT =null;
		int tuplaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tuplaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tupla = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExpresion((SLlamadaTupla) tupla); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expresion ::= LPAREN Expresion RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expresion ::= Valor 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExpresion((SValor) valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expresion ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExpresion((String) id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Valor ::= INT_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SValor(new TipoSubyacente(Tipus.INT), (String) v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Valor ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SValor(new TipoSubyacente(Tipus.FLOAT), (String) v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Valor ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SValor(new TipoSubyacente(Tipus.STRING), (String) v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Valor ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SValor(new TipoSubyacente(Tipus.BOOLEAN), (String) v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
