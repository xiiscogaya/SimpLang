
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.sintactic;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.*;
import compiler.simbols.*;
import compiler.taulasimbols.*;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\005\000\002\004\003\000\002\004\003" +
    "\000\002\004\004\000\002\024\004\000\002\024\003\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\004\000\002\006\004\000\002\007\007\000" +
    "\002\012\006\000\002\012\004\000\002\016\006\000\002" +
    "\014\010\000\002\031\005\000\002\031\003\000\002\017" +
    "\006\000\002\017\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\015\006\000\002\015\004\000" +
    "\002\020\013\000\002\025\006\000\002\037\004\000\002" +
    "\040\005\000\002\026\005\000\002\026\003\000\002\032" +
    "\014\000\002\032\010\000\002\032\013\000\002\032\007" +
    "\000\002\033\010\000\002\033\007\000\002\034\007\000" +
    "\002\035\015\000\002\041\006\000\002\042\006\000\002" +
    "\043\005\000\002\043\003\000\002\027\004\000\002\027" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\005\000\002\030" +
    "\003\000\002\030\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\010\003\006\021\005\034\010\001\002\000" +
    "\010\003\ufffc\021\ufffc\034\ufffc\001\002\000\040\004\041" +
    "\011\022\012\015\013\017\014\020\015\021\017\053\027" +
    "\035\033\060\036\036\042\040\045\034\046\057\050\052" +
    "\051\031\001\002\000\004\022\245\001\002\000\004\002" +
    "\244\001\002\000\014\011\022\012\015\013\017\014\020" +
    "\015\021\001\002\000\010\003\ufffd\021\ufffd\034\ufffd\001" +
    "\002\000\004\002\001\001\002\000\010\003\006\021\005" +
    "\034\010\001\002\000\004\002\uffff\001\002\000\004\004" +
    "\uffc7\001\002\000\004\004\023\001\002\000\004\004\uffc8" +
    "\001\002\000\004\004\uffc9\001\002\000\004\004\uffc6\001" +
    "\002\000\004\004\uffca\001\002\000\004\030\024\001\002" +
    "\000\014\011\022\012\015\013\017\014\020\015\021\001" +
    "\002\000\004\004\241\001\002\000\004\031\027\001\002" +
    "\000\004\021\030\001\002\000\040\004\041\011\022\012" +
    "\015\013\017\014\020\015\021\017\053\027\035\033\060" +
    "\036\036\042\040\045\034\046\057\050\052\051\031\001" +
    "\002\000\004\030\236\001\002\000\004\020\235\001\002" +
    "\000\004\020\234\001\002\000\016\004\106\006\074\007" +
    "\073\010\071\016\072\030\111\001\002\000\004\004\220" +
    "\001\002\000\020\004\106\006\074\007\073\010\071\016" +
    "\072\020\uffcb\030\111\001\002\000\042\004\ufff1\011\ufff1" +
    "\012\ufff1\013\ufff1\014\ufff1\015\ufff1\017\ufff1\022\ufff1\027" +
    "\ufff1\033\ufff1\036\ufff1\042\ufff1\045\ufff1\046\ufff1\050\ufff1" +
    "\051\ufff1\001\002\000\016\004\106\006\074\007\073\010" +
    "\071\016\072\030\111\001\002\000\012\023\070\025\132" +
    "\026\131\030\136\001\002\000\004\004\171\001\002\000" +
    "\042\004\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\017\ufff0\022\ufff0\027\ufff0\033\ufff0\036\ufff0\042\ufff0\045" +
    "\ufff0\046\ufff0\050\ufff0\051\ufff0\001\002\000\004\026\167" +
    "\001\002\000\004\020\166\001\002\000\004\020\165\001" +
    "\002\000\042\004\041\011\022\012\015\013\017\014\020" +
    "\015\021\017\053\022\ufff9\027\035\033\060\036\036\042" +
    "\040\045\034\046\057\050\052\051\031\001\002\000\004" +
    "\020\163\001\002\000\004\020\162\001\002\000\004\030" +
    "\154\001\002\000\014\011\022\012\015\013\017\014\020" +
    "\015\021\001\002\000\004\022\147\001\002\000\042\004" +
    "\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\017\uffef" +
    "\022\uffef\027\uffef\033\uffef\036\uffef\042\uffef\045\uffef\046" +
    "\uffef\050\uffef\051\uffef\001\002\000\004\020\146\001\002" +
    "\000\004\030\100\001\002\000\014\011\022\012\015\013" +
    "\017\014\020\015\021\001\002\000\004\020\064\001\002" +
    "\000\004\020\063\001\002\000\042\004\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\015\ufff5\017\ufff5\022\ufff5\027\ufff5" +
    "\033\ufff5\036\ufff5\042\ufff5\045\ufff5\046\ufff5\050\ufff5\051" +
    "\ufff5\001\002\000\042\004\ufff7\011\ufff7\012\ufff7\013\ufff7" +
    "\014\ufff7\015\ufff7\017\ufff7\022\ufff7\027\ufff7\033\ufff7\036" +
    "\ufff7\042\ufff7\045\ufff7\046\ufff7\050\ufff7\051\ufff7\001\002" +
    "\000\004\004\066\001\002\000\004\023\070\001\002\000" +
    "\004\020\uffe9\001\002\000\012\006\074\007\073\010\071" +
    "\016\072\001\002\000\022\020\uffbc\021\uffbc\024\uffbc\031" +
    "\uffbc\032\uffbc\037\uffbc\040\uffbc\041\uffbc\001\002\000\022" +
    "\020\uffb9\021\uffb9\024\uffb9\031\uffb9\032\uffb9\037\uffb9\040" +
    "\uffb9\041\uffb9\001\002\000\022\020\uffbb\021\uffbb\024\uffbb" +
    "\031\uffbb\032\uffbb\037\uffbb\040\uffbb\041\uffbb\001\002\000" +
    "\022\020\uffba\021\uffba\024\uffba\031\uffba\032\uffba\037\uffba" +
    "\040\uffba\041\uffba\001\002\000\004\024\076\001\002\000" +
    "\024\020\uffe4\021\uffe4\023\070\026\uffe4\031\uffe4\032\uffe4" +
    "\037\uffe4\040\uffe4\041\uffe4\001\002\000\022\020\uffe5\021" +
    "\uffe5\026\uffe5\031\uffe5\032\uffe5\037\uffe5\040\uffe5\041\uffe5" +
    "\001\002\000\014\011\022\012\015\013\017\014\020\015" +
    "\021\001\002\000\004\020\102\001\002\000\016\004\106" +
    "\006\074\007\073\010\071\016\072\030\111\001\002\000" +
    "\020\020\uffbe\021\uffbe\031\uffbe\032\uffbe\037\uffbe\040\uffbe" +
    "\041\uffbe\001\002\000\020\020\uffc0\021\uffc0\031\uffc0\032" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\001\002\000\020\020\uffc2" +
    "\021\uffc2\031\uffc2\032\uffc2\037\uffc2\040\uffc2\041\uffc2\001" +
    "\002\000\026\020\uffbd\021\uffbd\023\070\030\136\031\uffbd" +
    "\032\uffbd\037\uffbd\040\uffbd\041\uffbd\047\137\001\002\000" +
    "\012\020\122\037\114\040\113\041\116\001\002\000\020" +
    "\020\uffc1\021\uffc1\031\uffc1\032\uffc1\037\uffc1\040\uffc1\041" +
    "\uffc1\001\002\000\016\004\106\006\074\007\073\010\071" +
    "\016\072\030\111\001\002\000\012\031\115\037\114\040" +
    "\113\041\116\001\002\000\016\004\106\006\074\007\073" +
    "\010\071\016\072\030\111\001\002\000\016\004\106\006" +
    "\074\007\073\010\071\016\072\030\111\001\002\000\020" +
    "\020\uffbf\021\uffbf\031\uffbf\032\uffbf\037\uffbf\040\uffbf\041" +
    "\uffbf\001\002\000\016\004\106\006\074\007\073\010\071" +
    "\016\072\030\111\001\002\000\020\020\uffc3\021\uffc3\031" +
    "\uffc3\032\uffc3\037\uffc3\040\uffc3\041\uffc3\001\002\000\020" +
    "\020\uffc5\021\uffc5\031\uffc5\032\uffc5\037\uffc5\040\113\041" +
    "\116\001\002\000\020\020\uffc4\021\uffc4\031\uffc4\032\uffc4" +
    "\037\uffc4\040\uffc4\041\116\001\002\000\004\004\123\001" +
    "\002\000\010\023\070\025\132\026\131\001\002\000\004" +
    "\031\125\001\002\000\004\021\126\001\002\000\040\004" +
    "\041\011\022\012\015\013\017\014\020\015\021\017\053" +
    "\027\035\033\060\036\036\042\040\045\034\046\057\050" +
    "\052\051\031\001\002\000\004\022\130\001\002\000\042" +
    "\004\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\017" +
    "\uffd1\022\uffd1\027\uffd1\033\uffd1\036\uffd1\042\uffd1\045\uffd1" +
    "\046\uffd1\050\uffd1\051\uffd1\001\002\000\016\004\106\006" +
    "\074\007\073\010\071\016\072\030\111\001\002\000\016" +
    "\004\106\006\074\007\073\010\071\016\072\030\111\001" +
    "\002\000\022\020\uffdc\021\uffdc\026\uffdc\031\uffdc\032\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\001\002\000\014\020\uffe2\031" +
    "\uffe2\037\114\040\113\041\116\001\002\000\014\020\uffe3" +
    "\031\uffe3\037\114\040\113\041\116\001\002\000\016\004" +
    "\106\006\074\007\073\010\071\016\072\030\111\001\002" +
    "\000\004\004\140\001\002\000\020\020\uffdb\021\uffdb\031" +
    "\uffdb\032\uffdb\037\uffdb\040\uffdb\041\uffdb\001\002\000\006" +
    "\031\144\032\143\001\002\000\014\031\uffd9\032\uffd9\037" +
    "\114\040\113\041\116\001\002\000\016\004\106\006\074" +
    "\007\073\010\071\016\072\030\111\001\002\000\020\020" +
    "\uffdd\021\uffdd\031\uffdd\032\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\001\002\000\014\031\uffda\032\uffda\037\114\040\113\041" +
    "\116\001\002\000\042\004\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\017\ufff4\022\ufff4\027\ufff4\033\ufff4\036" +
    "\ufff4\042\ufff4\045\ufff4\046\ufff4\050\ufff4\051\ufff4\001\002" +
    "\000\010\003\uffde\021\uffde\034\uffde\001\002\000\004\004" +
    "\151\001\002\000\004\026\152\001\002\000\012\006\074" +
    "\007\073\010\071\016\072\001\002\000\004\020\uffec\001" +
    "\002\000\016\004\106\006\074\007\073\010\071\016\072" +
    "\030\111\001\002\000\014\031\uffcd\032\160\037\114\040" +
    "\113\041\116\001\002\000\004\031\157\001\002\000\004" +
    "\020\uffd0\001\002\000\016\004\106\006\074\007\073\010" +
    "\071\016\072\030\111\001\002\000\004\031\uffce\001\002" +
    "\000\042\004\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015" +
    "\ufff2\017\ufff2\022\ufff2\027\ufff2\033\ufff2\036\ufff2\042\ufff2" +
    "\045\ufff2\046\ufff2\050\ufff2\051\ufff2\001\002\000\042\004" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\017\ufff8" +
    "\022\ufff8\027\ufff8\033\ufff8\036\ufff8\042\ufff8\045\ufff8\046" +
    "\ufff8\050\ufff8\051\ufff8\001\002\000\004\022\ufffa\001\002" +
    "\000\042\004\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015" +
    "\ufff6\017\ufff6\022\ufff6\027\ufff6\033\ufff6\036\ufff6\042\ufff6" +
    "\045\ufff6\046\ufff6\050\ufff6\051\ufff6\001\002\000\042\004" +
    "\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\017\uffed" +
    "\022\uffed\027\uffed\033\uffed\036\uffed\042\uffed\045\uffed\046" +
    "\uffed\050\uffed\051\uffed\001\002\000\016\004\106\006\074" +
    "\007\073\010\071\016\072\030\111\001\002\000\014\020" +
    "\uffe1\031\uffe1\037\114\040\113\041\116\001\002\000\012" +
    "\020\uffea\026\172\031\uffea\032\uffea\001\002\000\016\004" +
    "\106\006\074\007\073\010\071\016\072\030\111\001\002" +
    "\000\016\020\uffeb\031\uffeb\032\uffeb\037\114\040\113\041" +
    "\116\001\002\000\012\021\175\037\114\040\113\041\116" +
    "\001\002\000\040\004\041\011\022\012\015\013\017\014" +
    "\020\015\021\017\053\027\035\033\060\036\036\042\040" +
    "\045\034\046\057\050\052\051\031\001\002\000\004\022" +
    "\177\001\002\000\046\004\uffd5\011\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\017\uffd5\022\uffd5\027\uffd5\033\uffd5\036" +
    "\uffd5\042\uffd5\043\201\044\200\045\uffd5\046\uffd5\050\uffd5" +
    "\051\uffd5\001\002\000\004\021\214\001\002\000\016\004" +
    "\106\006\074\007\073\010\071\016\072\030\111\001\002" +
    "\000\044\004\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\017\uffd7\022\uffd7\027\uffd7\033\uffd7\036\uffd7\042\uffd7" +
    "\044\203\045\uffd7\046\uffd7\050\uffd7\051\uffd7\001\002\000" +
    "\004\021\204\001\002\000\040\004\041\011\022\012\015" +
    "\013\017\014\020\015\021\017\053\027\035\033\060\036" +
    "\036\042\040\045\034\046\057\050\052\051\031\001\002" +
    "\000\004\022\206\001\002\000\042\004\uffd8\011\uffd8\012" +
    "\uffd8\013\uffd8\014\uffd8\015\uffd8\017\uffd8\022\uffd8\027\uffd8" +
    "\033\uffd8\036\uffd8\042\uffd8\045\uffd8\046\uffd8\050\uffd8\051" +
    "\uffd8\001\002\000\012\021\210\037\114\040\113\041\116" +
    "\001\002\000\040\004\041\011\022\012\015\013\017\014" +
    "\020\015\021\017\053\027\035\033\060\036\036\042\040" +
    "\045\034\046\057\050\052\051\031\001\002\000\004\022" +
    "\212\001\002\000\046\004\uffd3\011\uffd3\012\uffd3\013\uffd3" +
    "\014\uffd3\015\uffd3\017\uffd3\022\uffd3\027\uffd3\033\uffd3\036" +
    "\uffd3\042\uffd3\043\201\044\uffd3\045\uffd3\046\uffd3\050\uffd3" +
    "\051\uffd3\001\002\000\044\004\uffd4\011\uffd4\012\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\017\uffd4\022\uffd4\027\uffd4\033\uffd4" +
    "\036\uffd4\042\uffd4\044\uffd4\045\uffd4\046\uffd4\050\uffd4\051" +
    "\uffd4\001\002\000\040\004\041\011\022\012\015\013\017" +
    "\014\020\015\021\017\053\027\035\033\060\036\036\042" +
    "\040\045\034\046\057\050\052\051\031\001\002\000\004" +
    "\022\216\001\002\000\042\004\uffd6\011\uffd6\012\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\017\uffd6\022\uffd6\027\uffd6\033\uffd6" +
    "\036\uffd6\042\uffd6\045\uffd6\046\uffd6\050\uffd6\051\uffd6\001" +
    "\002\000\012\020\uffcc\037\114\040\113\041\116\001\002" +
    "\000\004\026\221\001\002\000\004\030\222\001\002\000" +
    "\014\011\022\012\015\013\017\014\020\015\021\001\002" +
    "\000\004\031\227\001\002\000\006\031\uffe6\032\225\001" +
    "\002\000\014\011\022\012\015\013\017\014\020\015\021" +
    "\001\002\000\004\031\uffe7\001\002\000\004\020\uffe8\001" +
    "\002\000\012\021\231\037\114\040\113\041\116\001\002" +
    "\000\040\004\041\011\022\012\015\013\017\014\020\015" +
    "\021\017\053\027\035\033\060\036\036\042\040\045\034" +
    "\046\057\050\052\051\031\001\002\000\004\022\233\001" +
    "\002\000\042\004\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2" +
    "\015\uffd2\017\uffd2\022\uffd2\027\uffd2\033\uffd2\036\uffd2\042" +
    "\uffd2\045\uffd2\046\uffd2\050\uffd2\051\uffd2\001\002\000\042" +
    "\004\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\017" +
    "\uffee\022\uffee\027\uffee\033\uffee\036\uffee\042\uffee\045\uffee" +
    "\046\uffee\050\uffee\051\uffee\001\002\000\042\004\ufff3\011" +
    "\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\017\ufff3\022\ufff3" +
    "\027\ufff3\033\ufff3\036\ufff3\042\ufff3\045\ufff3\046\ufff3\050" +
    "\ufff3\051\ufff3\001\002\000\004\004\237\001\002\000\004" +
    "\031\240\001\002\000\004\020\uffcf\001\002\000\006\031" +
    "\uffdf\032\242\001\002\000\014\011\022\012\015\013\017" +
    "\014\020\015\021\001\002\000\004\031\uffe0\001\002\000" +
    "\004\002\000\001\002\000\010\003\ufffb\021\ufffb\034\ufffb" +
    "\001\002\000\004\022\247\001\002\000\004\002\ufffe\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\014\002\006\003\011\004\012\020\010\021" +
    "\003\001\001\000\002\001\001\000\042\006\046\007\047" +
    "\011\041\012\060\013\055\014\061\016\045\024\245\025" +
    "\031\027\050\032\036\034\042\035\054\037\043\041\032" +
    "\042\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\013\004\012\020\010\021\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\024\015\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\006\046\007\047\011\041\012\060\013\055\014\061" +
    "\016\045\024\053\025\031\027\050\032\036\034\042\035" +
    "\054\037\043\041\032\042\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\010\102\025" +
    "\104\030\227\037\107\040\103\001\001\000\002\001\001" +
    "\000\014\010\102\025\104\030\216\037\107\040\103\001" +
    "\001\000\002\001\001\000\014\010\102\025\104\030\173" +
    "\037\107\040\103\001\001\000\004\017\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\006\046\007\047\011" +
    "\041\012\060\013\055\014\061\016\045\024\163\025\031" +
    "\027\050\032\036\034\042\035\054\037\043\041\032\042" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\066\001\001\000\002\001\001\000\004\010\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\076\001" +
    "\001\000\002\001\001\000\006\011\041\012\100\001\001" +
    "\000\002\001\001\000\014\010\102\025\104\030\106\037" +
    "\107\040\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\102\025\104\030\111" +
    "\037\107\040\103\001\001\000\002\001\001\000\014\010" +
    "\102\025\104\030\120\037\107\040\103\001\001\000\014" +
    "\010\102\025\104\030\117\037\107\040\103\001\001\000" +
    "\002\001\001\000\014\010\102\025\104\030\116\037\107" +
    "\040\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\123\037\043\001\001\000\004" +
    "\017\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\006\046\007\047\011\041\012\060\013\055\014\061" +
    "\016\045\024\126\025\031\027\050\032\036\034\042\035" +
    "\054\037\043\041\032\042\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\010\102\025\104\030\134\037" +
    "\107\040\103\001\001\000\014\010\102\025\104\030\133" +
    "\037\107\040\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\010\102\025\104\026\140" +
    "\030\141\037\107\040\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\010\102\025\104\030\144\037\107\040\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\152\001\001\000\002\001\001\000\016\010\102\025\104" +
    "\030\154\037\107\040\103\043\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\010\102" +
    "\025\104\030\154\037\107\040\103\043\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\102\025\104\030\167\037\107\040\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\010\102\025\104\030" +
    "\172\037\107\040\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\006\046\007\047\011\041\012\060\013" +
    "\055\014\061\016\045\024\175\025\031\027\050\032\036" +
    "\034\042\035\054\037\043\041\032\042\044\001\001\000" +
    "\002\001\001\000\004\033\201\001\001\000\002\001\001" +
    "\000\014\010\102\025\104\030\206\037\107\040\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\006\046" +
    "\007\047\011\041\012\060\013\055\014\061\016\045\024" +
    "\204\025\031\027\050\032\036\034\042\035\054\037\043" +
    "\041\032\042\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\006\046\007\047\011\041" +
    "\012\060\013\055\014\061\016\045\024\210\025\031\027" +
    "\050\032\036\034\042\035\054\037\043\041\032\042\044" +
    "\001\001\000\002\001\001\000\004\033\212\001\001\000" +
    "\002\001\001\000\042\006\046\007\047\011\041\012\060" +
    "\013\055\014\061\016\045\024\214\025\031\027\050\032" +
    "\036\034\042\035\054\037\043\041\032\042\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\041\012\223" +
    "\031\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\041\012\223\031\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\006\046\007" +
    "\047\011\041\012\060\013\055\014\061\016\045\024\231" +
    "\025\031\027\050\032\036\034\042\035\054\037\043\041" +
    "\032\042\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\024\015\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public static TaulaSimbols taulaSim = new TaulaSimbols(); 

    @Override
    public void syntax_error(Symbol cur_token) {
        report_error("Error sintactic", cur_token);
    }

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_error("Error sintactico no recuperable", cur_token);
        done_parsing();
    }

    @Override
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line " + (s.left + 1));   
                if (s.right >= 0)
                    m.append(", column " + (s.right + 1));
            }
        }
        m.append(" : " + message);
        System.err.println(m);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= ProgramaList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramaList ::= DecList ProgramaList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgramaList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgramaList ::= LBRACE Bloque RBRACE 
            {
              Object RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bloque = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 SemanticHelper.procesarMain((SBloque) bloque, taulaSim); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgramaList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DecList ::= DecFun 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DecList ::= DecClass 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DecList ::= error RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Bloque ::= Sentencia Bloque 
            {
              Object RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object sentencia = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bloque = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SBloque((SBloque) bloque, (SBase) sentencia); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Bloque ::= Sentencia 
            {
              Object RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object sentencia = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SBloque((SBase) sentencia); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Sentencia ::= DecConstante SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sentencia ::= DecVar SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sentencia ::= DecArray SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Sentencia ::= DecTupla SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sentencia ::= Asignacion SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Sentencia ::= LlamadaFuncion SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Sentencia ::= Return SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Sentencia ::= If_Sentencia 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Sentencia ::= While_Sentencia 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sentencia ::= For_Sentencia 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencia ::= Print_Sentencia SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Sentencia ::= Input_Sentencia SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DecConstante ::= CONST Type ID EQUAL Valor 
            {
              Object RESULT =null;
		int idTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object idType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SDecConstante((SType) idType, id, (SValor) valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecConstante",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DecVar ::= Type ID EQUAL Expresion 
            {
              Object RESULT =null;
		int idTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object idType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SDecVar((SType) idType, id, (SExpresion) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecVar",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DecVar ::= Type ID 
            {
              Object RESULT =null;
		int idTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object idType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SDecVar((SType) idType, id, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecVar",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DecArray ::= ARRAY Type ID ListaDimensiones 
            {
              Object RESULT =null;
		int idTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SDecArray((SType) idType, id, (SListaDimensiones) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecArray",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DecTupla ::= TUPLA ID EQUAL LPAREN ListaTupla RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SDecTupla(id, (SListaTupla) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecTupla",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ListaTupla ::= DecVar COMMA ListaTupla 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaTupla((SListaTupla) lista, (SDecVar) var); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaTupla",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListaTupla ::= DecVar 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaTupla((SDecVar) var); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaTupla",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListaDimensiones ::= LBRACKET Valor RBRACKET ListaDimensiones 
            {
              Object RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaDimensiones((SValor) size, (SListaDimensiones) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaDimensiones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListaDimensiones ::= LBRACKET Valor RBRACKET 
            {
              Object RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SListaDimensiones((SValor) size, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaDimensiones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Asignacion ::= ID EQUAL Expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SAsignacion(id, "=", (SExpresion) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Asignacion ::= ID OP_ASSIGN Expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SAsignacion(id, (String) op, (SExpresion) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Asignacion ::= LlamadaArray EQUAL Expresion 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SAsignacion((SLlamadaArray) array, "=", (SExpresion) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ListaParametros ::= Type ID COMMA ListaParametros 
            {
              Object RESULT =null;
		int idTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object idType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaParametros((SType) idType, id, (SListaParametros) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaParametros",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListaParametros ::= Type ID 
            {
              Object RESULT =null;
		int idTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object idType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaParametros((SType) idType, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaParametros",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DecFun ::= DEF Type ID LPAREN ListaParametros RPAREN LBRACE Bloque RBRACE 
            {
              Object RESULT =null;
		int idTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object idType = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bloque = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 SemanticHelper.procesarDecFuncion((SType) idType, id, (SListaParametros) params, (SBloque) bloque, taulaSim); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecFun",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LlamadaFuncion ::= ID LPAREN ListaArgumentos RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                    TipoSubyacente tipoRetorno = SemanticHelper.obtenerTipoFuncion(id, taulaSim);
                    RESULT = new SLlamadaFuncion(id, (SListaArgumentos) lista, tipoRetorno); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LlamadaFuncion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LlamadaArray ::= ID ListaDimensiones 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SLlamadaArray(id, (SListaDimensiones) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LlamadaArray",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LlamadaTupla ::= ID DOT ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int campoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String campo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SLlamadaTupla(id, campo); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LlamadaTupla",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ListaArgumentos ::= ListaArgumentos COMMA Expresion 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaArgumentos((SListaArgumentos) lista, (SExpresion) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaArgumentos",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ListaArgumentos ::= Expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaArgumentos((SExpresion) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaArgumentos",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // If_Sentencia ::= IF Expresion LBRACE Bloque RBRACE Elif_Lista ELSE LBRACE Bloque RBRACE 
            {
              Object RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bloque1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bloque1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object bloque1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bloque2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloque2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bloque2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SIf((SExpresion) expresion, (SBloque) bloque1, (SElif) lista, (SBloque) bloque2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("If_Sentencia",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // If_Sentencia ::= IF Expresion LBRACE Bloque RBRACE Elif_Lista 
            {
              Object RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bloque1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bloque1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object bloque1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SIf((SExpresion) expresion, (SBloque) bloque1, (SElif) lista, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("If_Sentencia",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // If_Sentencia ::= IF Expresion LBRACE Bloque RBRACE ELSE LBRACE Bloque RBRACE 
            {
              Object RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bloque1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bloque1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object bloque1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bloque2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloque2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bloque2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SIf((SExpresion) expresion, (SBloque) bloque1, null, (SBloque) bloque2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("If_Sentencia",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // If_Sentencia ::= IF Expresion LBRACE Bloque RBRACE 
            {
              Object RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bloque1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloque1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bloque1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SIf((SExpresion) expresion, (SBloque) bloque1, null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("If_Sentencia",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Elif_Lista ::= ELIF Expresion LBRACE Bloque RBRACE Elif_Lista 
            {
              Object RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object bloque = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SElif((SElif) lista, (SExpresion) expresion, (SBloque) bloque); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elif_Lista",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Elif_Lista ::= ELIF Expresion LBRACE Bloque RBRACE 
            {
              Object RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bloque = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SElif((SExpresion) expresion, (SBloque) bloque); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elif_Lista",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // While_Sentencia ::= WHILE Expresion LBRACE Bloque RBRACE 
            {
              Object RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bloque = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SWhile((SExpresion) expresion, (SBloque) bloque); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("While_Sentencia",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // For_Sentencia ::= FOR LPAREN DecVar SEMICOLON Expresion SEMICOLON Asignacion RPAREN LBRACE Bloque RBRACE 
            {
              Object RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object init = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int actualileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int actualiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object actuali = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bloque = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SFor((SDecVar) init, (SExpresion) condicion, (SAsignacion) actuali, (SBloque) bloque); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("For_Sentencia",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Print_Sentencia ::= PRINT LPAREN ListaExpresiones RPAREN 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SPrint((SListaExpresiones) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Print_Sentencia",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Input_Sentencia ::= INPUT LPAREN ID RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SInput(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Input_Sentencia",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ListaExpresiones ::= Expresion COMMA ListaExpresiones 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaExpresiones((SListaExpresiones) lista, (SExpresion) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaExpresiones",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ListaExpresiones ::= Expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaExpresiones((SExpresion) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaExpresiones",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Return ::= RETURN Expresion 
            {
              Object RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SReturn((SExpresion) expresion); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Return",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Return ::= RETURN 
            {
              Object RESULT =null;
		 RESULT = new SReturn(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Return",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Type ::= INT 
            {
              Object RESULT =null;
		 RESULT = new SType(new TipoSubyacente(Tipus.INT)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Type ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = new SType(new TipoSubyacente(Tipus.FLOAT)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Type ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = new SType(new TipoSubyacente(Tipus.BOOLEAN)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Type ::= STRING 
            {
              Object RESULT =null;
		 RESULT = new SType(new TipoSubyacente(Tipus.STRING)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Type ::= VOID 
            {
              Object RESULT =null;
		 RESULT = new SType(new TipoSubyacente(Tipus.VOID)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expresion ::= Expresion OP_ARITMETICO Expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExpresion((SExpresion) e1, (SExpresion) e2, (String) op); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expresion ::= Expresion OP_LOGICO Expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExpresion((SExpresion) e1, (SExpresion) e2, (String) op); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expresion ::= Expresion OP_COMPARACION Expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExpresion((SExpresion) e1, (SExpresion) e2, (String) op); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expresion ::= LlamadaFuncion 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExpresion((SLlamadaFuncion) func); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expresion ::= LlamadaArray 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExpresion((SLlamadaArray) array); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expresion ::= LlamadaTupla 
            {
              Object RESULT =null;
		int tuplaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tuplaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tupla = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExpresion((SLlamadaTupla) tupla); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expresion ::= LPAREN Expresion RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expresion ::= Valor 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExpresion((SValor) valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expresion ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExpresion((String) id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Valor ::= INT_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SValor(new TipoSubyacente(Tipus.INT), (String) v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Valor ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SValor(new TipoSubyacente(Tipus.FLOAT), (String) v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Valor ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SValor(new TipoSubyacente(Tipus.STRING), (String) v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Valor ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SValor(new TipoSubyacente(Tipus.BOOLEAN), (String) v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
