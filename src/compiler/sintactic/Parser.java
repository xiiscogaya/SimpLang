
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.sintactic;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.*;
import compiler.simbols.*;
import compiler.taulasimbols.*;
import compiler.codigo_intermedio.*;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\004\004" +
    "\000\002\017\004\000\002\017\003\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\006\007\000" +
    "\002\010\006\000\002\010\004\000\002\014\006\000\002" +
    "\012\010\000\002\024\005\000\002\024\003\000\002\015" +
    "\006\000\002\015\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\013\006\000\002\013\004\000" +
    "\002\016\013\000\002\016\004\000\002\020\006\000\002" +
    "\031\004\000\002\032\005\000\002\021\005\000\002\021" +
    "\003\000\002\025\014\000\002\025\010\000\002\025\013" +
    "\000\002\025\007\000\002\026\010\000\002\026\007\000" +
    "\002\027\007\000\002\030\015\000\002\033\006\000\002" +
    "\034\006\000\002\035\005\000\002\035\003\000\002\022" +
    "\004\000\002\022\003\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\005\000\002\023\003\000\002" +
    "\023\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\010\003\005\014\004\027\007\001\002\000" +
    "\032\003\051\004\036\006\041\012\047\022\032\026\057" +
    "\030\033\034\034\037\031\040\055\042\050\043\026\001" +
    "\002\000\004\015\241\001\002\000\004\002\240\001\002" +
    "\000\004\006\014\001\002\000\010\003\005\014\004\027" +
    "\007\001\002\000\004\002\ufffe\001\002\000\004\002\001" +
    "\001\002\000\004\002\uffff\001\002\000\004\004\015\001" +
    "\002\000\004\023\016\001\002\000\004\006\020\001\002" +
    "\000\004\024\024\001\002\000\004\004\021\001\002\000" +
    "\006\024\uffdf\025\022\001\002\000\004\006\020\001\002" +
    "\000\004\024\uffe0\001\002\000\004\014\025\001\002\000" +
    "\032\003\051\004\036\006\041\012\047\022\032\026\057" +
    "\030\033\034\034\037\031\040\055\042\050\043\026\001" +
    "\002\000\004\023\235\001\002\000\004\013\234\001\002" +
    "\000\004\013\233\001\002\000\016\004\104\005\071\007" +
    "\070\010\066\011\067\023\107\001\002\000\004\004\217" +
    "\001\002\000\020\004\104\005\071\007\070\010\066\011" +
    "\067\013\uffca\023\107\001\002\000\016\004\104\005\071" +
    "\007\070\010\066\011\067\023\107\001\002\000\034\003" +
    "\ufff2\004\ufff2\006\ufff2\012\ufff2\015\ufff2\022\ufff2\026\ufff2" +
    "\030\ufff2\034\ufff2\037\ufff2\040\ufff2\042\ufff2\043\ufff2\001" +
    "\002\000\012\016\065\020\130\021\127\023\134\001\002" +
    "\000\034\003\ufff1\004\ufff1\006\ufff1\012\ufff1\015\ufff1\022" +
    "\ufff1\026\ufff1\030\ufff1\034\ufff1\037\ufff1\040\ufff1\042\ufff1" +
    "\043\ufff1\001\002\000\004\021\171\001\002\000\004\004" +
    "\166\001\002\000\004\013\165\001\002\000\004\013\164" +
    "\001\002\000\034\003\051\004\036\006\041\012\047\015" +
    "\ufffa\022\032\026\057\030\033\034\034\037\031\040\055" +
    "\042\050\043\026\001\002\000\004\013\162\001\002\000" +
    "\004\013\161\001\002\000\004\006\155\001\002\000\004" +
    "\023\147\001\002\000\004\013\146\001\002\000\004\015" +
    "\145\001\002\000\034\003\ufff0\004\ufff0\006\ufff0\012\ufff0" +
    "\015\ufff0\022\ufff0\026\ufff0\030\ufff0\034\ufff0\037\ufff0\040" +
    "\ufff0\042\ufff0\043\ufff0\001\002\000\004\013\144\001\002" +
    "\000\004\023\076\001\002\000\004\013\075\001\002\000" +
    "\004\006\062\001\002\000\004\013\061\001\002\000\034" +
    "\003\ufff6\004\ufff6\006\ufff6\012\ufff6\015\ufff6\022\ufff6\026" +
    "\ufff6\030\ufff6\034\ufff6\037\ufff6\040\ufff6\042\ufff6\043\ufff6" +
    "\001\002\000\004\004\063\001\002\000\004\016\065\001" +
    "\002\000\004\013\uffe9\001\002\000\012\005\071\007\070" +
    "\010\066\011\067\001\002\000\022\013\uffc0\014\uffc0\017" +
    "\uffc0\024\uffc0\025\uffc0\031\uffc0\032\uffc0\033\uffc0\001\002" +
    "\000\022\013\uffbd\014\uffbd\017\uffbd\024\uffbd\025\uffbd\031" +
    "\uffbd\032\uffbd\033\uffbd\001\002\000\022\013\uffbf\014\uffbf" +
    "\017\uffbf\024\uffbf\025\uffbf\031\uffbf\032\uffbf\033\uffbf\001" +
    "\002\000\022\013\uffbe\014\uffbe\017\uffbe\024\uffbe\025\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\001\002\000\004\017\073\001" +
    "\002\000\024\013\uffe4\014\uffe4\016\065\021\uffe4\024\uffe4" +
    "\025\uffe4\031\uffe4\032\uffe4\033\uffe4\001\002\000\022\013" +
    "\uffe5\014\uffe5\021\uffe5\024\uffe5\025\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\001\002\000\034\003\ufff8\004\ufff8\006\ufff8\012" +
    "\ufff8\015\ufff8\022\ufff8\026\ufff8\030\ufff8\034\ufff8\037\ufff8" +
    "\040\ufff8\042\ufff8\043\ufff8\001\002\000\004\006\041\001" +
    "\002\000\004\013\100\001\002\000\016\004\104\005\071" +
    "\007\070\010\066\011\067\023\107\001\002\000\020\013" +
    "\uffc2\014\uffc2\024\uffc2\025\uffc2\031\uffc2\032\uffc2\033\uffc2" +
    "\001\002\000\020\013\uffc4\014\uffc4\024\uffc4\025\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\001\002\000\020\013\uffc6\014\uffc6" +
    "\024\uffc6\025\uffc6\031\uffc6\032\uffc6\033\uffc6\001\002\000" +
    "\026\013\uffc1\014\uffc1\016\065\023\134\024\uffc1\025\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\041\135\001\002\000\012\013" +
    "\120\031\111\032\112\033\114\001\002\000\020\013\uffc5" +
    "\014\uffc5\024\uffc5\025\uffc5\031\uffc5\032\uffc5\033\uffc5\001" +
    "\002\000\016\004\104\005\071\007\070\010\066\011\067" +
    "\023\107\001\002\000\012\024\113\031\111\032\112\033" +
    "\114\001\002\000\016\004\104\005\071\007\070\010\066" +
    "\011\067\023\107\001\002\000\016\004\104\005\071\007" +
    "\070\010\066\011\067\023\107\001\002\000\020\013\uffc3" +
    "\014\uffc3\024\uffc3\025\uffc3\031\uffc3\032\uffc3\033\uffc3\001" +
    "\002\000\016\004\104\005\071\007\070\010\066\011\067" +
    "\023\107\001\002\000\020\013\uffc7\014\uffc7\024\uffc7\025" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\001\002\000\020\013\uffc8" +
    "\014\uffc8\024\uffc8\025\uffc8\031\uffc8\032\uffc8\033\114\001" +
    "\002\000\020\013\uffc9\014\uffc9\024\uffc9\025\uffc9\031\uffc9" +
    "\032\112\033\114\001\002\000\004\004\121\001\002\000" +
    "\010\016\065\020\130\021\127\001\002\000\004\024\123" +
    "\001\002\000\004\014\124\001\002\000\032\003\051\004" +
    "\036\006\041\012\047\022\032\026\057\030\033\034\034" +
    "\037\031\040\055\042\050\043\026\001\002\000\004\015" +
    "\126\001\002\000\034\003\uffd0\004\uffd0\006\uffd0\012\uffd0" +
    "\015\uffd0\022\uffd0\026\uffd0\030\uffd0\034\uffd0\037\uffd0\040" +
    "\uffd0\042\uffd0\043\uffd0\001\002\000\016\004\104\005\071" +
    "\007\070\010\066\011\067\023\107\001\002\000\016\004" +
    "\104\005\071\007\070\010\066\011\067\023\107\001\002" +
    "\000\022\013\uffdb\014\uffdb\021\uffdb\024\uffdb\025\uffdb\031" +
    "\uffdb\032\uffdb\033\uffdb\001\002\000\014\013\uffe2\024\uffe2" +
    "\031\111\032\112\033\114\001\002\000\014\013\uffe3\024" +
    "\uffe3\031\111\032\112\033\114\001\002\000\016\004\104" +
    "\005\071\007\070\010\066\011\067\023\107\001\002\000" +
    "\004\004\136\001\002\000\020\013\uffda\014\uffda\024\uffda" +
    "\025\uffda\031\uffda\032\uffda\033\uffda\001\002\000\006\024" +
    "\142\025\141\001\002\000\014\024\uffd8\025\uffd8\031\111" +
    "\032\112\033\114\001\002\000\016\004\104\005\071\007" +
    "\070\010\066\011\067\023\107\001\002\000\020\013\uffdc" +
    "\014\uffdc\024\uffdc\025\uffdc\031\uffdc\032\uffdc\033\uffdc\001" +
    "\002\000\014\024\uffd9\025\uffd9\031\111\032\112\033\114" +
    "\001\002\000\034\003\ufff5\004\ufff5\006\ufff5\012\ufff5\015" +
    "\ufff5\022\ufff5\026\ufff5\030\ufff5\034\ufff5\037\ufff5\040\ufff5" +
    "\042\ufff5\043\ufff5\001\002\000\010\003\uffde\014\uffde\027" +
    "\uffde\001\002\000\034\003\uffed\004\uffed\006\uffed\012\uffed" +
    "\015\uffed\022\uffed\026\uffed\030\uffed\034\uffed\037\uffed\040" +
    "\uffed\042\uffed\043\uffed\001\002\000\016\004\104\005\071" +
    "\007\070\010\066\011\067\023\107\001\002\000\014\024" +
    "\uffcc\025\153\031\111\032\112\033\114\001\002\000\004" +
    "\024\152\001\002\000\004\013\uffcf\001\002\000\016\004" +
    "\104\005\071\007\070\010\066\011\067\023\107\001\002" +
    "\000\004\024\uffcd\001\002\000\004\004\156\001\002\000" +
    "\004\021\157\001\002\000\012\005\071\007\070\010\066" +
    "\011\067\001\002\000\004\013\uffec\001\002\000\034\003" +
    "\ufff3\004\ufff3\006\ufff3\012\ufff3\015\ufff3\022\ufff3\026\ufff3" +
    "\030\ufff3\034\ufff3\037\ufff3\040\ufff3\042\ufff3\043\ufff3\001" +
    "\002\000\034\003\ufff9\004\ufff9\006\ufff9\012\ufff9\015\ufff9" +
    "\022\ufff9\026\ufff9\030\ufff9\034\ufff9\037\ufff9\040\ufff9\042" +
    "\ufff9\043\ufff9\001\002\000\004\015\ufffb\001\002\000\034" +
    "\003\ufff7\004\ufff7\006\ufff7\012\ufff7\015\ufff7\022\ufff7\026" +
    "\ufff7\030\ufff7\034\ufff7\037\ufff7\040\ufff7\042\ufff7\043\ufff7" +
    "\001\002\000\034\003\uffee\004\uffee\006\uffee\012\uffee\015" +
    "\uffee\022\uffee\026\uffee\030\uffee\034\uffee\037\uffee\040\uffee" +
    "\042\uffee\043\uffee\001\002\000\012\013\uffea\021\167\024" +
    "\uffea\025\uffea\001\002\000\016\004\104\005\071\007\070" +
    "\010\066\011\067\023\107\001\002\000\016\013\uffeb\024" +
    "\uffeb\025\uffeb\031\111\032\112\033\114\001\002\000\016" +
    "\004\104\005\071\007\070\010\066\011\067\023\107\001" +
    "\002\000\014\013\uffe1\024\uffe1\031\111\032\112\033\114" +
    "\001\002\000\012\014\174\031\111\032\112\033\114\001" +
    "\002\000\032\003\051\004\036\006\041\012\047\022\032" +
    "\026\057\030\033\034\034\037\031\040\055\042\050\043" +
    "\026\001\002\000\004\015\176\001\002\000\040\003\uffd4" +
    "\004\uffd4\006\uffd4\012\uffd4\015\uffd4\022\uffd4\026\uffd4\030" +
    "\uffd4\034\uffd4\035\200\036\177\037\uffd4\040\uffd4\042\uffd4" +
    "\043\uffd4\001\002\000\004\014\213\001\002\000\016\004" +
    "\104\005\071\007\070\010\066\011\067\023\107\001\002" +
    "\000\036\003\uffd6\004\uffd6\006\uffd6\012\uffd6\015\uffd6\022" +
    "\uffd6\026\uffd6\030\uffd6\034\uffd6\036\202\037\uffd6\040\uffd6" +
    "\042\uffd6\043\uffd6\001\002\000\004\014\203\001\002\000" +
    "\032\003\051\004\036\006\041\012\047\022\032\026\057" +
    "\030\033\034\034\037\031\040\055\042\050\043\026\001" +
    "\002\000\004\015\205\001\002\000\034\003\uffd7\004\uffd7" +
    "\006\uffd7\012\uffd7\015\uffd7\022\uffd7\026\uffd7\030\uffd7\034" +
    "\uffd7\037\uffd7\040\uffd7\042\uffd7\043\uffd7\001\002\000\012" +
    "\014\207\031\111\032\112\033\114\001\002\000\032\003" +
    "\051\004\036\006\041\012\047\022\032\026\057\030\033" +
    "\034\034\037\031\040\055\042\050\043\026\001\002\000" +
    "\004\015\211\001\002\000\040\003\uffd2\004\uffd2\006\uffd2" +
    "\012\uffd2\015\uffd2\022\uffd2\026\uffd2\030\uffd2\034\uffd2\035" +
    "\200\036\uffd2\037\uffd2\040\uffd2\042\uffd2\043\uffd2\001\002" +
    "\000\036\003\uffd3\004\uffd3\006\uffd3\012\uffd3\015\uffd3\022" +
    "\uffd3\026\uffd3\030\uffd3\034\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\042\uffd3\043\uffd3\001\002\000\032\003\051\004\036\006" +
    "\041\012\047\022\032\026\057\030\033\034\034\037\031" +
    "\040\055\042\050\043\026\001\002\000\004\015\215\001" +
    "\002\000\034\003\uffd5\004\uffd5\006\uffd5\012\uffd5\015\uffd5" +
    "\022\uffd5\026\uffd5\030\uffd5\034\uffd5\037\uffd5\040\uffd5\042" +
    "\uffd5\043\uffd5\001\002\000\012\013\uffcb\031\111\032\112" +
    "\033\114\001\002\000\004\021\220\001\002\000\004\023" +
    "\221\001\002\000\004\006\041\001\002\000\004\024\226" +
    "\001\002\000\006\024\uffe6\025\224\001\002\000\004\006" +
    "\041\001\002\000\004\024\uffe7\001\002\000\004\013\uffe8" +
    "\001\002\000\012\014\230\031\111\032\112\033\114\001" +
    "\002\000\032\003\051\004\036\006\041\012\047\022\032" +
    "\026\057\030\033\034\034\037\031\040\055\042\050\043" +
    "\026\001\002\000\004\015\232\001\002\000\034\003\uffd1" +
    "\004\uffd1\006\uffd1\012\uffd1\015\uffd1\022\uffd1\026\uffd1\030" +
    "\uffd1\034\uffd1\037\uffd1\040\uffd1\042\uffd1\043\uffd1\001\002" +
    "\000\034\003\ufff4\004\ufff4\006\ufff4\012\ufff4\015\ufff4\022" +
    "\ufff4\026\ufff4\030\ufff4\034\ufff4\037\ufff4\040\ufff4\042\ufff4" +
    "\043\ufff4\001\002\000\034\003\uffef\004\uffef\006\uffef\012" +
    "\uffef\015\uffef\022\uffef\026\uffef\030\uffef\034\uffef\037\uffef" +
    "\040\uffef\042\uffef\043\uffef\001\002\000\004\004\236\001" +
    "\002\000\004\024\237\001\002\000\004\013\uffce\001\002" +
    "\000\004\002\000\001\002\000\012\002\ufffc\003\uffdd\014" +
    "\uffdd\027\uffdd\001\002\000\004\015\243\001\002\000\004" +
    "\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\012\002\005\003\011\004\010\016\007\001" +
    "\001\000\040\005\043\006\044\010\055\011\053\012\057" +
    "\014\042\017\241\020\027\022\045\025\034\027\036\030" +
    "\052\031\037\033\026\034\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\012\004" +
    "\010\016\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\005\043\006\044\010\055" +
    "\011\053\012\057\014\042\017\051\020\027\022\045\025" +
    "\034\027\036\030\052\031\037\033\026\034\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\007\100\020\102\023\226\031\105\032\101\001\001" +
    "\000\002\001\001\000\014\007\100\020\102\023\215\031" +
    "\105\032\101\001\001\000\014\007\100\020\102\023\172" +
    "\031\105\032\101\001\001\000\002\001\001\000\004\015" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\005" +
    "\043\006\044\010\055\011\053\012\057\014\042\017\162" +
    "\020\027\022\045\025\034\027\036\030\052\031\037\033" +
    "\026\034\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\063" +
    "\001\001\000\002\001\001\000\004\007\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\076\001\001" +
    "\000\002\001\001\000\014\007\100\020\102\023\104\031" +
    "\105\032\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\100\020\102\023\107" +
    "\031\105\032\101\001\001\000\002\001\001\000\014\007" +
    "\100\020\102\023\116\031\105\032\101\001\001\000\014" +
    "\007\100\020\102\023\115\031\105\032\101\001\001\000" +
    "\002\001\001\000\014\007\100\020\102\023\114\031\105" +
    "\032\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\121\031\037\001\001\000\004" +
    "\015\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\005\043\006\044\010\055\011\053\012\057\014\042" +
    "\017\124\020\027\022\045\025\034\027\036\030\052\031" +
    "\037\033\026\034\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\100\020\102\023\132\031\105\032" +
    "\101\001\001\000\014\007\100\020\102\023\131\031\105" +
    "\032\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\007\100\020\102\021\136\023\137" +
    "\031\105\032\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\100" +
    "\020\102\023\142\031\105\032\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\007\100\020\102\023\147\031" +
    "\105\032\101\035\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\007\100\020\102\023" +
    "\147\031\105\032\101\035\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\100\020\102\023\167\031\105" +
    "\032\101\001\001\000\002\001\001\000\014\007\100\020" +
    "\102\023\171\031\105\032\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\005\043\006\044\010\055\011" +
    "\053\012\057\014\042\017\174\020\027\022\045\025\034" +
    "\027\036\030\052\031\037\033\026\034\041\001\001\000" +
    "\002\001\001\000\004\026\200\001\001\000\002\001\001" +
    "\000\014\007\100\020\102\023\205\031\105\032\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\005\043" +
    "\006\044\010\055\011\053\012\057\014\042\017\203\020" +
    "\027\022\045\025\034\027\036\030\052\031\037\033\026" +
    "\034\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\005\043\006\044\010\055\011\053" +
    "\012\057\014\042\017\207\020\027\022\045\025\034\027" +
    "\036\030\052\031\037\033\026\034\041\001\001\000\002" +
    "\001\001\000\004\026\211\001\001\000\002\001\001\000" +
    "\040\005\043\006\044\010\055\011\053\012\057\014\042" +
    "\017\213\020\027\022\045\025\034\027\036\030\052\031" +
    "\037\033\026\034\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\222\024\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\222\024\224\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\005\043\006\044\010\055\011\053\012\057\014\042\017" +
    "\230\020\027\022\045\025\034\027\036\030\052\031\037" +
    "\033\026\034\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public static TaulaSimbols taulaSim = new TaulaSimbols(); 
    public static CodigoIntermedio codigoIntermedio = new CodigoIntermedio();

    public static ComplexSymbolFactory factory = new ComplexSymbolFactory();

    public int getLine(Symbol cur_token) {
        ComplexSymbol token = (ComplexSymbol) cur_token;
        Location l = token.getLeft();
        return l.getLine();
        
    }

    @Override
    public void syntax_error(Symbol cur_token) {
        String mensaje = "Error sintáctico en línea " + getLine(cur_token) +
                     ": se encontró '" + (cur_token.value != null ? cur_token.value : cur_token.sym) + "'";
        ErrorManager.addError(2, mensaje);
    }

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) {
        String mensaje = "Error sintáctico no recuperable en línea " + getLine(cur_token) +
                        ": se encontró '" + (cur_token.value != null ? cur_token.value : cur_token.sym) + "'";
        
        ErrorManager.addError(2, mensaje); // 2 indica error sintáctico

        // Detener el análisis sintáctico
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= ProgramaList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramaList ::= DecFun ProgramaList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgramaList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgramaList ::= Main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgramaList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Main ::= LBRACE Bloque RBRACE 
            {
              Object RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bloque = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 SemanticHelper.procesarMain((SBloque) bloque, taulaSim, codigoIntermedio); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Main ::= error RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Bloque ::= Sentencia Bloque 
            {
              Object RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object sentencia = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bloque = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SBloque((SBloque) bloque, (SBase) sentencia); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Bloque ::= Sentencia 
            {
              Object RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object sentencia = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SBloque((SBase) sentencia); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Sentencia ::= DecConstante SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Sentencia ::= DecVar SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sentencia ::= DecArray SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sentencia ::= DecTupla SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Sentencia ::= Asignacion SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sentencia ::= LlamadaFuncion SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Sentencia ::= Return SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Sentencia ::= If_Sentencia 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Sentencia ::= While_Sentencia 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Sentencia ::= For_Sentencia 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sentencia ::= Print_Sentencia SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencia ::= Input_Sentencia SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Sentencia ::= error SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DecConstante ::= CONST TYPE ID EQUAL Valor 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SDecConstante(cleft, type, id, (SValor) valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecConstante",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DecVar ::= TYPE ID EQUAL Expresion 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SDecVar(typeleft, type, id, (SExpresion) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecVar",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DecVar ::= TYPE ID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SDecVar(typeleft, type, id, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecVar",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DecArray ::= ARRAY TYPE ID ListaDimensiones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SDecArray(aleft, type, id, (SListaDimensiones) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecArray",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DecTupla ::= TUPLA ID EQUAL LPAREN ListaTupla RPAREN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SDecTupla(tleft, id, (SListaTupla) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecTupla",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ListaTupla ::= DecVar COMMA ListaTupla 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaTupla((SListaTupla) lista, (SDecVar) var); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaTupla",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListaTupla ::= DecVar 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaTupla((SDecVar) var); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaTupla",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListaDimensiones ::= LBRACKET Valor RBRACKET ListaDimensiones 
            {
              Object RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaDimensiones(sizeleft, (SValor) size, (SListaDimensiones) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaDimensiones",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListaDimensiones ::= LBRACKET Valor RBRACKET 
            {
              Object RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SListaDimensiones(sizeleft, (SValor) size, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaDimensiones",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Asignacion ::= ID EQUAL Expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SAsignacion(idleft, id, "=", (SExpresion) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Asignacion ::= ID OP_ASSIGN Expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SAsignacion(idleft, id, (String) op, (SExpresion) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Asignacion ::= LlamadaArray EQUAL Expresion 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SAsignacion(arrayleft, (SLlamadaArray) array, "=", (SExpresion) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ListaParametros ::= TYPE ID COMMA ListaParametros 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaParametros(typeleft, type, id, (SListaParametros) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaParametros",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListaParametros ::= TYPE ID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaParametros(typeleft, type, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaParametros",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DecFun ::= DEF TYPE ID LPAREN ListaParametros RPAREN LBRACE Bloque RBRACE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bloque = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 SemanticHelper.procesarDecFuncion(dleft, type, id, (SListaParametros) params, (SBloque) bloque, taulaSim, codigoIntermedio); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecFun",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DecFun ::= error RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecFun",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LlamadaFuncion ::= ID LPAREN ListaArgumentos RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                    TipoSubyacente tipoRetorno = SemanticHelper.obtenerTipoFuncion(id, taulaSim);
                    RESULT = new SLlamadaFuncion(idleft, id, (SListaArgumentos) lista, tipoRetorno); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LlamadaFuncion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LlamadaArray ::= ID ListaDimensiones 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SLlamadaArray(idleft, id, (SListaDimensiones) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LlamadaArray",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LlamadaTupla ::= ID DOT ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int campoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String campo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SLlamadaTupla(idleft, id, campo); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LlamadaTupla",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ListaArgumentos ::= ListaArgumentos COMMA Expresion 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaArgumentos(listaleft, (SListaArgumentos) lista, (SExpresion) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaArgumentos",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ListaArgumentos ::= Expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaArgumentos(eleft, (SExpresion) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaArgumentos",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // If_Sentencia ::= IF Expresion LBRACE Bloque RBRACE Elif_Lista ELSE LBRACE Bloque RBRACE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bloque1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bloque1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object bloque1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bloque2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloque2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bloque2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SIf(ileft, (SExpresion) expresion, (SBloque) bloque1, (SElif) lista, (SBloque) bloque2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("If_Sentencia",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // If_Sentencia ::= IF Expresion LBRACE Bloque RBRACE Elif_Lista 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bloque1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bloque1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object bloque1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SIf(ileft, (SExpresion) expresion, (SBloque) bloque1, (SElif) lista, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("If_Sentencia",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // If_Sentencia ::= IF Expresion LBRACE Bloque RBRACE ELSE LBRACE Bloque RBRACE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bloque1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bloque1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object bloque1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bloque2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloque2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bloque2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SIf(ileft, (SExpresion) expresion, (SBloque) bloque1, null, (SBloque) bloque2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("If_Sentencia",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // If_Sentencia ::= IF Expresion LBRACE Bloque RBRACE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bloque1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloque1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bloque1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SIf(ileft, (SExpresion) expresion, (SBloque) bloque1, null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("If_Sentencia",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Elif_Lista ::= ELIF Expresion LBRACE Bloque RBRACE Elif_Lista 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object bloque = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SElif(eleft, (SElif) lista, (SExpresion) expresion, (SBloque) bloque); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elif_Lista",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Elif_Lista ::= ELIF Expresion LBRACE Bloque RBRACE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bloque = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SElif(eleft, (SExpresion) expresion, (SBloque) bloque); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elif_Lista",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // While_Sentencia ::= WHILE Expresion LBRACE Bloque RBRACE 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bloque = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SWhile(wleft, (SExpresion) expresion, (SBloque) bloque); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("While_Sentencia",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // For_Sentencia ::= FOR LPAREN DecVar SEMICOLON Expresion SEMICOLON Asignacion RPAREN LBRACE Bloque RBRACE 
            {
              Object RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object init = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int actualileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int actualiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object actuali = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bloque = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SFor((SDecVar) init, (SExpresion) condicion, (SAsignacion) actuali, (SBloque) bloque); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("For_Sentencia",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Print_Sentencia ::= PRINT LPAREN ListaExpresiones RPAREN 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SPrint((SListaExpresiones) lista); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Print_Sentencia",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Input_Sentencia ::= INPUT LPAREN ID RPAREN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SInput(ileft, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Input_Sentencia",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ListaExpresiones ::= Expresion COMMA ListaExpresiones 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaExpresiones((SListaExpresiones) lista, (SExpresion) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaExpresiones",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ListaExpresiones ::= Expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SListaExpresiones((SExpresion) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaExpresiones",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Return ::= RETURN Expresion 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SReturn(rleft, (SExpresion) expresion); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Return",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Return ::= RETURN 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SReturn(rleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Return",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expresion ::= Expresion OP_ARITMETICO Expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExpresion(e1left, (SExpresion) e1, (SExpresion) e2, (String) op); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expresion ::= Expresion OP_LOGICO Expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExpresion(e1left, (SExpresion) e1, (SExpresion) e2, (String) op); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expresion ::= Expresion OP_COMPARACION Expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExpresion(e1left, (SExpresion) e1, (SExpresion) e2, (String) op); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expresion ::= LlamadaFuncion 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExpresion(funcleft, (SLlamadaFuncion) func); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expresion ::= LlamadaArray 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExpresion(arrayleft, (SLlamadaArray) array); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expresion ::= LlamadaTupla 
            {
              Object RESULT =null;
		int tuplaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tuplaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tupla = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExpresion(tuplaleft, (SLlamadaTupla) tupla); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expresion ::= LPAREN Expresion RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expresion ::= Valor 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExpresion(valorleft, (SValor) valor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expresion ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SExpresion(idleft, (String) id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Valor ::= INT_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SValor(new TipoSubyacente(Tipus.INT), (String) v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Valor ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SValor(new TipoSubyacente(Tipus.FLOAT), (String) v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Valor ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SValor(new TipoSubyacente(Tipus.CHAR), (String) v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Valor ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SValor(new TipoSubyacente(Tipus.BOOLEAN), (String) v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
