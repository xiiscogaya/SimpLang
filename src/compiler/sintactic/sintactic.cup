package compiler.sintactic;



import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;

import java_cup.runtime.*;

import compiler.sintactic.Symbols.*;

import java.io.PrintStream;
import java.util.HashMap;

class Parser;

parser code {:
    private HashMap<String, Double> tsymbols = new HashMap<>();

    public Double getSymbolValue(String id) {
         return tsymbols.get(id);
    }

    public void addSymbol(String id, Double value) {
        if (tsymbols.get(id) == null) {
            tsymbols.put(id, value);
        } else {
            tsymbols.replace(id, value);
        }
    }

    public void printVars(PrintStream out) {
        if (tsymbols.size() == 0) {
            out.println("No hay variables declaradas");
        } else {
            String fmt = "%-8s: %f";
            tsymbols.forEach((k,v) -> out.println(String.format(fmt,k,v)));
        }
    }
:}

terminal String ID;
terminal INT, STRING, BOOL, FLOAT;
terminal DEF, LPAREN, RPAREN, CLASS, CONST, DPOINT;

non terminal Programa, ListaSentencias, Sentencia, DecFun, DecClass, DecVar, Type;

Programa ::= ListaSentencias;

ListaSentencias ::= ListaSentencias Sentencia 
                    | ;
Sentencia ::= DecFun
            | DecClass
            | DecVar
            ;

DecFun ::= DEF Type ID LPAREN RPAREN DPOINT;

DecClass ::= CLASS ID LPAREN RPAREN DPOINT; 

DecVar ::= CONST Type ID 
            | Type ID
            ;

Type ::= INT
        | STRING
        | BOOL
        | FLOAT
        ;